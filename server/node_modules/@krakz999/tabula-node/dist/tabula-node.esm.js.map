{"version":3,"file":"tabula-node.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { exec } from 'child_process';\nimport path, { dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nexport interface ExtractOptions {\n  /**\n   * Portion of the page to analyze. Example: \"269.875,12.75,790.5,561\".\n   * Accepts top,left,bottom,right i.e. y1,x1,y2,x2 where all values are in points relative to the top left corner.\n   * If all values are between 0-100 (inclusive) and preceded by '%', input will be taken as % of actual height or width of the page.\n   * Example: \"%0,0,100,50\". To specify multiple areas, pass an array.\n   * Default is entire page.\n   */\n  area?: string | string[];\n\n  /**\n   * X coordinates of column boundaries. Example \"10.1,20.2,30.3\".\n   * If all values are between 0-100 (inclusive) and preceded by '%', input will be taken as % of actual width of the page.\n   * Example: \"%25,50,80.6\"\n   */\n  columns?: string;\n\n  /**\n   * Output format: (CSV,TSV,JSON). Default: CSV\n   */\n  format?: 'CSV' | 'TSV' | 'JSON';\n\n  /**\n   * Guess the portion of the page to analyze per page.\n   */\n  guess?: boolean;\n\n  /**\n   * Force PDF to be extracted using lattice-mode extraction (if there are ruling lines separating each cell, as in a PDF of an Excel spreadsheet)\n   */\n  lattice?: boolean;\n\n  /**\n   * [Deprecated in favor of -t/--stream] Force PDF not to be extracted using spreadsheet-style extraction (if there are no ruling lines separating each cell)\n   */\n  noSpreadsheet?: boolean;\n\n  /**\n   * Comma separated list of ranges, or all. Examples: \"1-3,5-7\", --pages 3 or \"all\". Default is \"1\"\n   */\n  pages?: string | 'all';\n\n  /**\n   * Password to decrypt document. Default is empty\n   */\n  password?: string;\n\n  /**\n   * Force PDF to be extracted using stream-mode extraction (if there are no ruling lines separating each cell)\n   */\n  stream?: boolean;\n\n  /**\n   * Use embedded line returns in cells. (Only in spreadsheet mode.)\n   */\n  useLineReturns?: boolean;\n}\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst libPath = path.resolve(\n  __dirname,\n  'lib',\n  'tabula-1.0.5-with-dependencies.jar'\n);\n\n/**\n * Asynchronously extracts tables from a PDF file.\n *\n * @param {string} filePath - The path to the PDF file from which to extract tables.\n * @param {ExtractOptions} options - The options to use when extracting tables.\n * @returns {Promise<string>} A promise that resolves with the extracted tables.\n */\nexport async function extractTables(\n  filePath: string,\n  options?: ExtractOptions\n) {\n  const args = Object.entries(options || {}).flatMap(([key, value]) => {\n    key =\n      '--' + key.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();\n\n    if (typeof value === 'boolean') {\n      return value ? [key] : [];\n    } else if (Array.isArray(value)) {\n      return value.flatMap((v) => [key, v]);\n    } else {\n      return [key, value];\n    }\n  });\n\n  const command = `java -jar ${libPath} ${args.join(' ')} ${filePath}`;\n\n  return new Promise<string>((resolve, reject) => {\n    exec(command, (error, stdout, stderr) => {\n      if (error) reject(new Error(stderr));\n      resolve(stdout);\n    });\n  });\n}\n"],"names":["__filename","fileURLToPath","import","meta","url","__dirname","dirname","libPath","path","resolve","extractTables","_x","_x2","_extractTables","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","filePath","options","args","command","wrap","_callee$","_context","prev","next","Object","entries","flatMap","_ref","key","value","replace","toLowerCase","Array","isArray","v","join","abrupt","Promise","reject","exec","error","stdout","stderr","Error","stop"],"mappings":"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"}