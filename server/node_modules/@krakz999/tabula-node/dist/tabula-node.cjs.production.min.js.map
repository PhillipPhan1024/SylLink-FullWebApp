{"version":3,"file":"tabula-node.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { exec } from 'child_process';\nimport path, { dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nexport interface ExtractOptions {\n  /**\n   * Portion of the page to analyze. Example: \"269.875,12.75,790.5,561\".\n   * Accepts top,left,bottom,right i.e. y1,x1,y2,x2 where all values are in points relative to the top left corner.\n   * If all values are between 0-100 (inclusive) and preceded by '%', input will be taken as % of actual height or width of the page.\n   * Example: \"%0,0,100,50\". To specify multiple areas, pass an array.\n   * Default is entire page.\n   */\n  area?: string | string[];\n\n  /**\n   * X coordinates of column boundaries. Example \"10.1,20.2,30.3\".\n   * If all values are between 0-100 (inclusive) and preceded by '%', input will be taken as % of actual width of the page.\n   * Example: \"%25,50,80.6\"\n   */\n  columns?: string;\n\n  /**\n   * Output format: (CSV,TSV,JSON). Default: CSV\n   */\n  format?: 'CSV' | 'TSV' | 'JSON';\n\n  /**\n   * Guess the portion of the page to analyze per page.\n   */\n  guess?: boolean;\n\n  /**\n   * Force PDF to be extracted using lattice-mode extraction (if there are ruling lines separating each cell, as in a PDF of an Excel spreadsheet)\n   */\n  lattice?: boolean;\n\n  /**\n   * [Deprecated in favor of -t/--stream] Force PDF not to be extracted using spreadsheet-style extraction (if there are no ruling lines separating each cell)\n   */\n  noSpreadsheet?: boolean;\n\n  /**\n   * Comma separated list of ranges, or all. Examples: \"1-3,5-7\", --pages 3 or \"all\". Default is \"1\"\n   */\n  pages?: string | 'all';\n\n  /**\n   * Password to decrypt document. Default is empty\n   */\n  password?: string;\n\n  /**\n   * Force PDF to be extracted using stream-mode extraction (if there are no ruling lines separating each cell)\n   */\n  stream?: boolean;\n\n  /**\n   * Use embedded line returns in cells. (Only in spreadsheet mode.)\n   */\n  useLineReturns?: boolean;\n}\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst libPath = path.resolve(\n  __dirname,\n  'lib',\n  'tabula-1.0.5-with-dependencies.jar'\n);\n\n/**\n * Asynchronously extracts tables from a PDF file.\n *\n * @param {string} filePath - The path to the PDF file from which to extract tables.\n * @param {ExtractOptions} options - The options to use when extracting tables.\n * @returns {Promise<string>} A promise that resolves with the extracted tables.\n */\nexport async function extractTables(\n  filePath: string,\n  options?: ExtractOptions\n) {\n  const args = Object.entries(options || {}).flatMap(([key, value]) => {\n    key =\n      '--' + key.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();\n\n    if (typeof value === 'boolean') {\n      return value ? [key] : [];\n    } else if (Array.isArray(value)) {\n      return value.flatMap((v) => [key, v]);\n    } else {\n      return [key, value];\n    }\n  });\n\n  const command = `java -jar ${libPath} ${args.join(' ')} ${filePath}`;\n\n  return new Promise<string>((resolve, reject) => {\n    exec(command, (error, stdout, stderr) => {\n      if (error) reject(new Error(stderr));\n      resolve(stdout);\n    });\n  });\n}\n"],"names":["__filename","fileURLToPath","import","libPath","path","resolve","dirname","_extractTables","_regeneratorRuntime","mark","_callee","filePath","options","args","command","wrap","_context","prev","next","Object","entries","flatMap","_ref","key","value","replace","toLowerCase","Array","isArray","v","join","abrupt","Promise","reject","exec","error","stdout","stderr","Error","stop","apply","this","arguments","_x","_x2"],"mappings":"0qNA8DA,IAAMA,EAAaC,EAAAA,cAAcC,oBAAAA,SAAAA,QAAAA,OAAAA,cAAAA,YAAAA,KAAAA,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,oCAAAA,SAAAA,SAAAA,MAE3BC,EAAUC,EAAKC,QADHC,EAAAA,QAAQN,GAGxB,MACA,sCAmCD,SAAAO,UAAA,SAAAC,IAAAC,MAzBM,SAAAC,EACLC,EACAC,GAAwB,IAAAC,EAAAC,EAAA,OAAAN,IAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAe0C,OAb5DL,EAAOM,OAAOC,QAAQR,GAAW,CAAA,GAAIS,SAAQ,SAAAC,GAAiB,IAAfC,EAAGD,EAAA,GAAEE,EAAKF,EAAA,GAI7D,OAHAC,EACE,KAAOA,EAAIE,QAAQ,+BAAgC,SAASC,cAEzC,kBAAVF,EACFA,EAAQ,CAACD,GAAO,GACdI,MAAMC,QAAQJ,GAChBA,EAAMH,SAAQ,SAACQ,GAAC,MAAK,CAACN,EAAKM,MAE3B,CAACN,EAAKC,EAEjB,IAEMV,EAAO,aAAgBX,EAAO,IAAIU,EAAKiB,KAAK,KAAI,IAAInB,EAAQK,EAAAe,OAE3D,SAAA,IAAIC,SAAgB,SAAC3B,EAAS4B,GACnCC,EAAAA,KAAKpB,GAAS,SAACqB,EAAOC,EAAQC,GACxBF,GAAOF,EAAO,IAAIK,MAAMD,IAC5BhC,EAAQ+B,EACV,GACD,KAAC,KAAA,EAAA,IAAA,MAAA,OAAApB,EAAAuB,OAAA,GAAA7B,EACH,IAAAH,gLAAAA,EAAAiC,MAAAC,KAAAC,UAAA,uBAzBD,SAAmCC,EAAAC,GAAA,OAAArC,EAAAiC,MAAAC,KAAAC,UAAA"}